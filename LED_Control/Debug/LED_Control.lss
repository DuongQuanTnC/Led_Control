
LED_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8b  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ec  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000467  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 03 02 	call	0x406	; 0x406 <main>
  74:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z14setOutput8bit1v>:
void setInput4bit1() {
	DDRB = 0xF0;
	PORTB = 0xFF;
}
void setOutput8bit1() {
	DDRB = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <_Z7option1v>:
}
void option1() {
	int j=0;
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	70 e0       	ldi	r23, 0x00	; 0
	while (j<2) {
  88:	62 30       	cpi	r22, 0x02	; 2
  8a:	71 05       	cpc	r23, r1
  8c:	24 f5       	brge	.+72     	; 0xd6 <_Z7option1v+0x52>
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0 ; i < 8 ; i++) {
  92:	28 30       	cpi	r18, 0x08	; 8
  94:	31 05       	cpc	r19, r1
  96:	e4 f4       	brge	.+56     	; 0xd0 <_Z7option1v+0x4c>
			PORTB &= ~(1<<i);
  98:	48 b3       	in	r20, 0x18	; 24
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 2e       	mov	r0, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <_Z7option1v+0x22>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <_Z7option1v+0x1e>
  aa:	98 2f       	mov	r25, r24
  ac:	90 95       	com	r25
  ae:	94 23       	and	r25, r20
  b0:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	50 e7       	ldi	r21, 0x70	; 112
  b6:	e2 e0       	ldi	r30, 0x02	; 2
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	50 40       	sbci	r21, 0x00	; 0
  bc:	e0 40       	sbci	r30, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <_Z7option1v+0x34>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_Z7option1v+0x3e>
  c2:	00 00       	nop
			_delay_ms(100);
			PORTB |= (1<<i);
  c4:	98 b3       	in	r25, 0x18	; 24
  c6:	89 2b       	or	r24, r25
  c8:	88 bb       	out	0x18, r24	; 24
	PORTB = 0xFF;
}
void option1() {
	int j=0;
	while (j<2) {
		for (int i = 0 ; i < 8 ; i++) {
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	e1 cf       	rjmp	.-62     	; 0x92 <_Z7option1v+0xe>
			PORTB &= ~(1<<i);
			_delay_ms(100);
			PORTB |= (1<<i);
		}
		j+=1;
  d0:	6f 5f       	subi	r22, 0xFF	; 255
  d2:	7f 4f       	sbci	r23, 0xFF	; 255
	DDRB = 0xFF;
	PORTB = 0xFF;
}
void option1() {
	int j=0;
	while (j<2) {
  d4:	d9 cf       	rjmp	.-78     	; 0x88 <_Z7option1v+0x4>
  d6:	08 95       	ret

000000d8 <_Z7option2v>:
		j+=1;
	}
	
}
void option2() {
	int j=0;
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	70 e0       	ldi	r23, 0x00	; 0
	while (j<2) {
  dc:	62 30       	cpi	r22, 0x02	; 2
  de:	71 05       	cpc	r23, r1
  e0:	0c f0       	brlt	.+2      	; 0xe4 <_Z7option2v+0xc>
  e2:	55 c0       	rjmp	.+170    	; 0x18e <_Z7option2v+0xb6>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0 ; i < 4 ; i++) {
  e8:	24 30       	cpi	r18, 0x04	; 4
  ea:	31 05       	cpc	r19, r1
  ec:	2c f5       	brge	.+74     	; 0x138 <_Z7option2v+0x60>
			PORTB |= (1<<(i+4));
  ee:	e8 b3       	in	r30, 0x18	; 24
  f0:	a9 01       	movw	r20, r18
  f2:	4c 5f       	subi	r20, 0xFC	; 252
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	dc 01       	movw	r26, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_Z7option2v+0x2a>
  fe:	aa 0f       	add	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	4a 95       	dec	r20
 104:	e2 f7       	brpl	.-8      	; 0xfe <_Z7option2v+0x26>
 106:	ad 01       	movw	r20, r26
 108:	4e 2b       	or	r20, r30
 10a:	48 bb       	out	0x18, r20	; 24
			PORTB &= ~(1<<i);
 10c:	48 b3       	in	r20, 0x18	; 24
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <_Z7option2v+0x3e>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <_Z7option2v+0x3a>
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	bf ef       	ldi	r27, 0xFF	; 255
 122:	40 e7       	ldi	r20, 0x70	; 112
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	b1 50       	subi	r27, 0x01	; 1
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <_Z7option2v+0x4e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z7option2v+0x58>
 130:	00 00       	nop
	
}
void option2() {
	int j=0;
	while (j<2) {
		for (int i = 0 ; i < 4 ; i++) {
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	d8 cf       	rjmp	.-80     	; 0xe8 <_Z7option2v+0x10>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
			PORTB |= (1<<(i+4));
			PORTB &= ~(1<<i);
			_delay_ms(100);
		}
		for (int i = 0 ; i < 5 ; i++) {
 13c:	25 30       	cpi	r18, 0x05	; 5
 13e:	31 05       	cpc	r19, r1
 140:	1c f5       	brge	.+70     	; 0x188 <_Z7option2v+0xb0>
			PORTB |= (1<<i);
 142:	e8 b3       	in	r30, 0x18	; 24
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <_Z7option2v+0x7a>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <_Z7option2v+0x76>
 156:	4e 2b       	or	r20, r30
 158:	48 bb       	out	0x18, r20	; 24
			PORTB &= ~(1<<(i+4));
 15a:	48 b3       	in	r20, 0x18	; 24
 15c:	f9 01       	movw	r30, r18
 15e:	34 96       	adiw	r30, 0x04	; 4
 160:	02 c0       	rjmp	.+4      	; 0x166 <_Z7option2v+0x8e>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	ea 95       	dec	r30
 168:	e2 f7       	brpl	.-8      	; 0x162 <_Z7option2v+0x8a>
 16a:	80 95       	com	r24
 16c:	84 23       	and	r24, r20
 16e:	88 bb       	out	0x18, r24	; 24
 170:	9f ef       	ldi	r25, 0xFF	; 255
 172:	a0 e7       	ldi	r26, 0x70	; 112
 174:	b2 e0       	ldi	r27, 0x02	; 2
 176:	91 50       	subi	r25, 0x01	; 1
 178:	a0 40       	sbci	r26, 0x00	; 0
 17a:	b0 40       	sbci	r27, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <_Z7option2v+0x9e>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <_Z7option2v+0xa8>
 180:	00 00       	nop
		for (int i = 0 ; i < 4 ; i++) {
			PORTB |= (1<<(i+4));
			PORTB &= ~(1<<i);
			_delay_ms(100);
		}
		for (int i = 0 ; i < 5 ; i++) {
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	da cf       	rjmp	.-76     	; 0x13c <_Z7option2v+0x64>
			PORTB |= (1<<i);
			PORTB &= ~(1<<(i+4));
			_delay_ms(100);
		}
		j+=1;
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	
}
void option2() {
	int j=0;
	while (j<2) {
 18c:	a7 cf       	rjmp	.-178    	; 0xdc <_Z7option2v+0x4>
 18e:	08 95       	ret

00000190 <_Z7option3v>:
		//optionLed();
	}
}

void option3() {
	int j=0;
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
	while (j<2) {
 194:	22 30       	cpi	r18, 0x02	; 2
 196:	31 05       	cpc	r19, r1
 198:	0c f0       	brlt	.+2      	; 0x19c <_Z7option3v+0xc>
 19a:	63 c0       	rjmp	.+198    	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0
		for (int i = 0; i<8 ;i+=2) {
 1a0:	48 30       	cpi	r20, 0x08	; 8
 1a2:	51 05       	cpc	r21, r1
 1a4:	7c f4       	brge	.+30     	; 0x1c4 <_Z7option3v+0x34>
			PORTB &= ~(1<<i);
 1a6:	68 b3       	in	r22, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	04 2e       	mov	r0, r20
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <_Z7option3v+0x24>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <_Z7option3v+0x20>
 1b8:	80 95       	com	r24
 1ba:	86 23       	and	r24, r22
 1bc:	88 bb       	out	0x18, r24	; 24
}

void option3() {
	int j=0;
	while (j<2) {
		for (int i = 0; i<8 ;i+=2) {
 1be:	4e 5f       	subi	r20, 0xFE	; 254
 1c0:	5f 4f       	sbci	r21, 0xFF	; 255
 1c2:	ee cf       	rjmp	.-36     	; 0x1a0 <_Z7option3v+0x10>
 1c4:	4f ef       	ldi	r20, 0xFF	; 255
 1c6:	84 e3       	ldi	r24, 0x34	; 52
 1c8:	9c e0       	ldi	r25, 0x0C	; 12
 1ca:	41 50       	subi	r20, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <_Z7option3v+0x3a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <_Z7option3v+0x44>
 1d4:	00 00       	nop
			PORTB &= ~(1<<i);
		}
		_delay_ms(500);
		for (int i = 0; i<8 ;i+=2) {
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	48 30       	cpi	r20, 0x08	; 8
 1dc:	51 05       	cpc	r21, r1
 1de:	74 f4       	brge	.+28     	; 0x1fc <_Z7option3v+0x6c>
			PORTB |= (1<<i);
 1e0:	68 b3       	in	r22, 0x18	; 24
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	04 2e       	mov	r0, r20
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <_Z7option3v+0x5e>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <_Z7option3v+0x5a>
 1f2:	86 2b       	or	r24, r22
 1f4:	88 bb       	out	0x18, r24	; 24
	while (j<2) {
		for (int i = 0; i<8 ;i+=2) {
			PORTB &= ~(1<<i);
		}
		_delay_ms(500);
		for (int i = 0; i<8 ;i+=2) {
 1f6:	4e 5f       	subi	r20, 0xFE	; 254
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	ef cf       	rjmp	.-34     	; 0x1da <_Z7option3v+0x4a>
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	50 e0       	ldi	r21, 0x00	; 0
			PORTB |= (1<<i);
		}
		for (int i = 1; i<8 ;i+=2) {
 200:	48 30       	cpi	r20, 0x08	; 8
 202:	51 05       	cpc	r21, r1
 204:	7c f4       	brge	.+30     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
			PORTB &= ~(1<<i);
 206:	68 b3       	in	r22, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	04 2e       	mov	r0, r20
 20e:	02 c0       	rjmp	.+4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 218:	80 95       	com	r24
 21a:	86 23       	and	r24, r22
 21c:	88 bb       	out	0x18, r24	; 24
		}
		_delay_ms(500);
		for (int i = 0; i<8 ;i+=2) {
			PORTB |= (1<<i);
		}
		for (int i = 1; i<8 ;i+=2) {
 21e:	4e 5f       	subi	r20, 0xFE	; 254
 220:	5f 4f       	sbci	r21, 0xFF	; 255
 222:	ee cf       	rjmp	.-36     	; 0x200 <__EEPROM_REGION_LENGTH__>
 224:	4f ef       	ldi	r20, 0xFF	; 255
 226:	84 e3       	ldi	r24, 0x34	; 52
 228:	9c e0       	ldi	r25, 0x0C	; 12
 22a:	41 50       	subi	r20, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 234:	00 00       	nop
			PORTB &= ~(1<<i);
		}
		_delay_ms(500);
		for (int i = 1; i<8 ;i+=2) {
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	48 30       	cpi	r20, 0x08	; 8
 23c:	51 05       	cpc	r21, r1
 23e:	74 f4       	brge	.+28     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
			PORTB |= (1<<i);
 240:	68 b3       	in	r22, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	04 2e       	mov	r0, r20
 248:	02 c0       	rjmp	.+4      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 252:	86 2b       	or	r24, r22
 254:	88 bb       	out	0x18, r24	; 24
		}
		for (int i = 1; i<8 ;i+=2) {
			PORTB &= ~(1<<i);
		}
		_delay_ms(500);
		for (int i = 1; i<8 ;i+=2) {
 256:	4e 5f       	subi	r20, 0xFE	; 254
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	ef cf       	rjmp	.-34     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
			PORTB |= (1<<i);
		}
		j+=1;
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
	}
}

void option3() {
	int j=0;
	while (j<2) {
 260:	99 cf       	rjmp	.-206    	; 0x194 <_Z7option3v+0x4>
 262:	08 95       	ret

00000264 <_Z7option4v>:
	}
	
}

void option4() {
	int j=0;
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
	while (j<2) {
 268:	62 30       	cpi	r22, 0x02	; 2
 26a:	71 05       	cpc	r23, r1
 26c:	0c f0       	brlt	.+2      	; 0x270 <_Z7option4v+0xc>
 26e:	65 c0       	rjmp	.+202    	; 0x33a <_Z7option4v+0xd6>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0; i<4 ;i++) {
 274:	24 30       	cpi	r18, 0x04	; 4
 276:	31 05       	cpc	r19, r1
 278:	64 f5       	brge	.+88     	; 0x2d2 <_Z7option4v+0x6e>
			PORTB &= ~(1<<i);
 27a:	e8 b3       	in	r30, 0x18	; 24
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 2e       	mov	r0, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <_Z7option4v+0x26>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <_Z7option4v+0x22>
 28e:	54 2f       	mov	r21, r20
 290:	50 95       	com	r21
 292:	5e 23       	and	r21, r30
 294:	58 bb       	out	0x18, r21	; 24
			PORTB &= ~(1<< (7-i));
 296:	58 b3       	in	r21, 0x18	; 24
 298:	e7 e0       	ldi	r30, 0x07	; 7
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	e2 1b       	sub	r30, r18
 29e:	f3 0b       	sbc	r31, r19
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_Z7option4v+0x42>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	ea 95       	dec	r30
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_Z7option4v+0x3e>
 2aa:	98 2f       	mov	r25, r24
 2ac:	90 95       	com	r25
 2ae:	95 23       	and	r25, r21
 2b0:	98 bb       	out	0x18, r25	; 24
 2b2:	af ef       	ldi	r26, 0xFF	; 255
 2b4:	e1 ee       	ldi	r30, 0xE1	; 225
 2b6:	f4 e0       	ldi	r31, 0x04	; 4
 2b8:	a1 50       	subi	r26, 0x01	; 1
 2ba:	e0 40       	sbci	r30, 0x00	; 0
 2bc:	f0 40       	sbci	r31, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z7option4v+0x54>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z7option4v+0x5e>
 2c2:	00 00       	nop
			_delay_ms(200);
			PORTB |= (1<<i) | (1<<(7-i));
 2c4:	98 b3       	in	r25, 0x18	; 24
 2c6:	84 2b       	or	r24, r20
 2c8:	89 2b       	or	r24, r25
 2ca:	88 bb       	out	0x18, r24	; 24
}

void option4() {
	int j=0;
	while (j<2) {
		for (int i = 0; i<4 ;i++) {
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	d1 cf       	rjmp	.-94     	; 0x274 <_Z7option4v+0x10>
 2d2:	25 e0       	ldi	r18, 0x05	; 5
 2d4:	30 e0       	ldi	r19, 0x00	; 0
			PORTB &= ~(1<< (7-i));
			_delay_ms(200);
			PORTB |= (1<<i) | (1<<(7-i));
		}
		
		for (int i = 5; i<8 ;i++) {
 2d6:	28 30       	cpi	r18, 0x08	; 8
 2d8:	31 05       	cpc	r19, r1
 2da:	64 f5       	brge	.+88     	; 0x334 <_Z7option4v+0xd0>
			PORTB &= ~(1<<i);
 2dc:	e8 b3       	in	r30, 0x18	; 24
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	ac 01       	movw	r20, r24
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <_Z7option4v+0x88>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <_Z7option4v+0x84>
 2f0:	54 2f       	mov	r21, r20
 2f2:	50 95       	com	r21
 2f4:	5e 23       	and	r21, r30
 2f6:	58 bb       	out	0x18, r21	; 24
			PORTB &= ~(1<< (7-i));
 2f8:	58 b3       	in	r21, 0x18	; 24
 2fa:	e7 e0       	ldi	r30, 0x07	; 7
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e2 1b       	sub	r30, r18
 300:	f3 0b       	sbc	r31, r19
 302:	02 c0       	rjmp	.+4      	; 0x308 <_Z7option4v+0xa4>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	ea 95       	dec	r30
 30a:	e2 f7       	brpl	.-8      	; 0x304 <_Z7option4v+0xa0>
 30c:	98 2f       	mov	r25, r24
 30e:	90 95       	com	r25
 310:	95 23       	and	r25, r21
 312:	98 bb       	out	0x18, r25	; 24
 314:	af ef       	ldi	r26, 0xFF	; 255
 316:	e1 ee       	ldi	r30, 0xE1	; 225
 318:	f4 e0       	ldi	r31, 0x04	; 4
 31a:	a1 50       	subi	r26, 0x01	; 1
 31c:	e0 40       	sbci	r30, 0x00	; 0
 31e:	f0 40       	sbci	r31, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <_Z7option4v+0xb6>
 322:	00 c0       	rjmp	.+0      	; 0x324 <_Z7option4v+0xc0>
 324:	00 00       	nop
			_delay_ms(200);
			PORTB |= (1<<i) | (1<<(7-i));
 326:	98 b3       	in	r25, 0x18	; 24
 328:	84 2b       	or	r24, r20
 32a:	89 2b       	or	r24, r25
 32c:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~(1<< (7-i));
			_delay_ms(200);
			PORTB |= (1<<i) | (1<<(7-i));
		}
		
		for (int i = 5; i<8 ;i++) {
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	d1 cf       	rjmp	.-94     	; 0x2d6 <_Z7option4v+0x72>
			PORTB &= ~(1<<i);
			PORTB &= ~(1<< (7-i));
			_delay_ms(200);
			PORTB |= (1<<i) | (1<<(7-i));
		}
		j+=1;
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
	
}

void option4() {
	int j=0;
	while (j<2) {
 338:	97 cf       	rjmp	.-210    	; 0x268 <_Z7option4v+0x4>
 33a:	08 95       	ret

0000033c <_Z11timer1_initv>:
    // Read the received char from UDR
    return UDR;
}

void delay_ms(uint16_t ms) {
    while (ms--) {
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	87 bb       	out	0x17, r24	; 23
 340:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow_count+0x1>
 344:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflow_count>
 348:	1d bc       	out	0x2d, r1	; 45
 34a:	1c bc       	out	0x2c, r1	; 44
 34c:	1f bc       	out	0x2f, r1	; 47
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	8e bd       	out	0x2e, r24	; 46
 352:	84 e0       	ldi	r24, 0x04	; 4
 354:	89 bf       	out	0x39, r24	; 57
 356:	08 95       	ret

00000358 <_Z10USART_initv>:
 358:	86 e8       	ldi	r24, 0x86	; 134
 35a:	80 bd       	out	0x20, r24	; 32
 35c:	1b b8       	out	0x0b, r1	; 11
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	89 b9       	out	0x09, r24	; 9
 362:	10 bc       	out	0x20, r1	; 32
 364:	88 e1       	ldi	r24, 0x18	; 24
 366:	8a b9       	out	0x0a, r24	; 10
 368:	08 95       	ret

0000036a <__vector_8>:
        TCNT1 = 0x00; // Reset timer
        while (overflow_count < 1); // Wait for ~1ms
    }
}

ISR(TIMER1_OVF_vect) {
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
    overflow_count++; // Increment overflow count
 378:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflow_count>
 37c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflow_count+0x1>
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <overflow_count+0x1>
 386:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflow_count>
    if (overflow_count >= 4) { // approximately 1 ms delay
 38a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflow_count>
 38e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <overflow_count+0x1>
 392:	04 97       	sbiw	r24, 0x04	; 4
 394:	20 f0       	brcs	.+8      	; 0x39e <__vector_8+0x34>
        overflow_count = 0;
 396:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow_count+0x1>
 39a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflow_count>
    }
}
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_11>:

ISR(USART_RXC_vect) {
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
    unsigned char received_data = UDR;
 3b8:	8c b1       	in	r24, 0x0c	; 12
    // Control LED mode based on received data
    if (received_data == '1') {
 3ba:	81 33       	cpi	r24, 0x31	; 49
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <__vector_11+0x1a>
        led_mode = 1; // option 1
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <__vector_11+0x3c>
    } else if (received_data == '2') {
 3c6:	82 33       	cpi	r24, 0x32	; 50
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <__vector_11+0x26>
        led_mode = 2; // option 2
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <__vector_11+0x3c>
    } else if (received_data == '3') {
 3d2:	83 33       	cpi	r24, 0x33	; 51
 3d4:	21 f4       	brne	.+8      	; 0x3de <__vector_11+0x32>
		led_mode = 3; // option 3
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <__vector_11+0x3c>
    } else if (received_data == '4') {
 3de:	84 33       	cpi	r24, 0x34	; 52
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <__vector_11+0x3c>
		led_mode = 4; // option 4
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    }
}
 3e8:	8f 91       	pop	r24
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <_Z5setupv>:

void setup() {
    timer1_init();
 3f4:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z11timer1_initv>
    USART_init();
 3f8:	0e 94 ac 01 	call	0x358	; 0x358 <_Z10USART_initv>
    sei(); // Enable global interrupts
 3fc:	78 94       	sei
    UCSRB |= (1<<RXCIE); // Enable RX Complete Interrupt
 3fe:	8a b1       	in	r24, 0x0a	; 10
 400:	80 68       	ori	r24, 0x80	; 128
 402:	8a b9       	out	0x0a, r24	; 10
 404:	08 95       	ret

00000406 <main>:
}

int main(void) {
	
	setOutput8bit1();
 406:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14setOutput8bit1v>
    setup();
 40a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z5setupv>

    while (1) 
	{
        if (led_mode == '1')
 40e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 412:	81 33       	cpi	r24, 0x31	; 49
 414:	19 f4       	brne	.+6      	; 0x41c <main+0x16>
		{
			option1();
 416:	0e 94 42 00 	call	0x84	; 0x84 <_Z7option1v>
 41a:	f9 cf       	rjmp	.-14     	; 0x40e <main+0x8>
		}
        else if (led_mode == '2') 
 41c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 420:	82 33       	cpi	r24, 0x32	; 50
 422:	19 f4       	brne	.+6      	; 0x42a <main+0x24>
		{             
			option2();
 424:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z7option2v>
 428:	f2 cf       	rjmp	.-28     	; 0x40e <main+0x8>
        }
        else if (led_mode == '3') 
 42a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42e:	83 33       	cpi	r24, 0x33	; 51
 430:	19 f4       	brne	.+6      	; 0x438 <main+0x32>
		{
            option3();
 432:	0e 94 c8 00 	call	0x190	; 0x190 <_Z7option3v>
 436:	eb cf       	rjmp	.-42     	; 0x40e <main+0x8>
        }
        else if(led_mode == '4')
 438:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43c:	84 33       	cpi	r24, 0x34	; 52
 43e:	39 f7       	brne	.-50     	; 0x40e <main+0x8>
		{
            option4();
 440:	0e 94 32 01 	call	0x264	; 0x264 <_Z7option4v>
 444:	e4 cf       	rjmp	.-56     	; 0x40e <main+0x8>

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
